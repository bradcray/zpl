/****
   *   Jacobi Iterations
  *
 ****/

program jacobi;

---------- Declarations ----------

config var
  n       : integer = 5;      -- problem size
  epsilon : float   = 0.0001; -- epsilon value end condition
  verbose : boolean = false;  -- print out information about execution
  timing  : boolean = false;  -- determine the execution time

region
  R    = [1..n,   1..n  ]; -- problem region
  BigR = [0..n+1, 0..n+1]; --    with borders

direction
  north = [-1,  0]; -- cardinal directions
  east  = [ 0,  1];
  south = [ 1,  0];
  west  = [ 0, -1];

---------- Entry Procedure ----------

procedure jacobi();
var
  A       : [BigR] double;
  Temp    : [R]    double;
  delta   :        double;
  runtime :        double;
  iters   :        integer;
[R] begin
  ---------- Initialization ----------

  if timing then
    ResetTimer();
  end;
  A := 0.0;
  [north of R] A := 0.0;
  [east  of R] A := 0.0;
  [west  of R] A := 0.0;
  [south of R] A := 1.0;

  ---------- Main Computation ----------

  iters := 0;
  repeat
    Temp := (A@north + A@east + A@south + A@west) / 4.0;
    delta := max<< abs(A-Temp);
    A := Temp;
    iters += 1;
  until delta < epsilon;

  if timing then
    runtime := CheckTimer();
  end;

  ---------- Print Results ----------

  writeln("Jacobi completed in %d iterations.":iters);
  if verbose then
    writeln(A);
  end;
  if timing then
    writeln("Execution time:  ", "%10.6f":runtime);
  end;
end;
